{"version":3,"sources":["ResultsPage.js","Menu.js","App.js","serviceWorker.js","index.js"],"names":["ResultsPage","props","console","log","this","lines","map","line","position","currentDriver","firstName","lastName","Component","Menu","onFileRead","e","content","fReader","result","resContent","JSON","parse","resultObj","SessionMapping","sessionType","TrackMapping","trackName","leaderBoardLinesWithPos","addPositionField","sessionResult","leaderBoardLines","setState","dataLoaded","msToTime","ms","Date","toISOString","slice","cupPositions","0","1","2","3","4","idx","car","cupCategory","CarMapping","carModel","timing","bestLap","timeDiff","onUpload","onloadend","readAsText","fileInput","current","files","handleChange","event","title","target","value","state","React","createRef","FileReader","component","className","type","ref","onClick","leaderboard","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"s8DAoBeA,E,kDAjBX,WAAYC,GAAQ,uCACVA,G,qDAKN,OADAC,QAAQC,IAAIC,KAAKH,MAAMI,OAEnB,6BACKD,KAAKH,MAAMI,MAAMC,KAAI,SAAAC,GAElB,OADAL,QAAQC,IAAII,EAAKC,SAAW,MAAQD,EAAKE,cAAcC,UAAY,IAAMH,EAAKE,cAAcE,UACpF,4BAAKJ,EAAKC,SAAW,MAAQD,EAAKE,cAAcC,UAAY,IAAMH,EAAKE,cAAcE,kB,GAXvFC,aCuFXC,E,kDAhFX,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IAMVa,WAAa,SAACC,GACV,IAAMC,EAAU,EAAKC,QAAQC,OAEvBC,EAAaC,KAAKC,MAAML,GAE1BM,EAAY,CACZ,QAAWC,EAAeJ,EAAWK,aACrC,MAASC,EAAaN,EAAWO,YAG/BC,EAA0B,EAAKC,iBAAiBT,EAAWU,cAAcC,kBAC/ER,EAAS,YAAkBK,EAE3B,EAAKX,QAAUM,EAEf,EAAKS,SAAS,CAACC,YAAY,KAtBZ,EAyBnBC,SAAW,SAACC,GACR,OAAO,IAAIC,KAAKD,GAAIE,cAAcC,MAAM,IAAK,IA1B9B,EA6BnBT,iBAAmB,SAACvB,GAChB,IAAIiC,EAAe,CACfC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,GAEP,OAAOtC,EAAMC,KAAI,SAACC,EAAMqC,GAUpB,OATAN,EAAa/B,EAAKsC,IAAIC,cAAgB,EAEtCvC,EAAI,SAAeqC,EAAI,EACvBrC,EAAI,YAAkB+B,EAAa/B,EAAKsC,IAAIC,aAC5CvC,EAAI,QAAcwC,EAAWxC,EAAKsC,IAAIG,UACtCzC,EAAK0C,OAAL,SAAgC,IAANL,EAAU,EAAIvC,EAAMuC,GAAKK,OAAOC,QAAU7C,EAAM,GAAG4C,OAAOC,QACpF3C,EAAK0C,OAAL,kBAAyC,IAANL,EAAU,GAAK,IAAM,EAAKX,SAAS1B,EAAK0C,OAAOE,UAClF5C,EAAK0C,OAAL,iBAAkC,EAAKhB,SAAS1B,EAAK0C,OAAOC,SAErD3C,MA/CI,EAmDnB6C,SAAW,WACP,EAAKnC,QAAQoC,UAAY,EAAKvC,WAC9B,EAAKG,QAAQqC,WAAW,EAAKC,UAAUC,QAAQC,MAAM,GAAI,aArD1C,EAwDnBC,aAAe,SAACC,GACZ,EAAK5B,SAAS,CAAC6B,MAAOD,EAAME,OAAOC,SAvDnC,EAAKC,MAAQ,CAAC/B,YAAY,EAAO4B,MAAO,IACxC,EAAKL,UAAYS,IAAMC,YACvB,EAAKhD,QAAU,IAAIiD,WAJJ,E,qDA6Df,IAAIC,EACJ,yBAAKC,UAAU,SACX,6BAAK,2BAAOC,KAAK,OAAOC,IAAKlE,KAAKmD,aAClC,6BAAK,4BAAQc,KAAK,SAASE,QAASnE,KAAKgD,UAApC,UAQT,OALIhD,KAAK2D,MAAM/B,aAGXmC,EAAY,kBAAC,EAAD,CAAa9D,MAAOD,KAAKY,QAAQwD,eAG7C,6BACKL,O,GA7EEvD,aCQJ6D,MAVf,WACE,OACE,yBAAKL,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCIYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzF,QAAQyF,MAAMA,EAAMC,c","file":"static/js/main.140c5b62.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass ResultsPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    };\r\n\r\n    render() {\r\n        console.log(this.props.lines);\r\n        return (\r\n            <div>\r\n                {this.props.lines.map(line => {\r\n                    console.log(line.position + \" - \" + line.currentDriver.firstName + \" \" + line.currentDriver.lastName);\r\n                    return (<h1>{line.position + \" - \" + line.currentDriver.firstName + \" \" + line.currentDriver.lastName}</h1>)\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResultsPage;","import React, { Component } from 'react';\r\nimport TrackMapping from './track_name_mapping.json';\r\nimport SessionMapping from './session_mapping.json';\r\nimport CarMapping from './car_name_mapping.json';\r\nimport ResultsPage from './ResultsPage';\r\n\r\nclass Menu extends Component {\r\n    fReader;\r\n    content;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {dataLoaded: false, title: ''}\r\n        this.fileInput = React.createRef();\r\n        this.fReader = new FileReader();\r\n    };\r\n\r\n    onFileRead = (e) => {\r\n        const content = this.fReader.result;\r\n        \r\n        const resContent = JSON.parse(content);\r\n\r\n        let resultObj = {\r\n            'session': SessionMapping[resContent.sessionType],\r\n            'track': TrackMapping[resContent.trackName]\r\n        };\r\n        \r\n        const leaderBoardLinesWithPos = this.addPositionField(resContent.sessionResult.leaderBoardLines);\r\n        resultObj['leaderboard'] = leaderBoardLinesWithPos;\r\n\r\n        this.content = resultObj;\r\n\r\n        this.setState({dataLoaded: true});\r\n    }\r\n\r\n    msToTime = (ms) => {\r\n        return new Date(ms).toISOString().slice(14, -1);\r\n    }\r\n\r\n    addPositionField = (lines) => {\r\n        let cupPositions = {\r\n            0: 0, // Overall\r\n            1: 0, // ProAm\r\n            2: 0, // Am\r\n            3: 0, // Silver\r\n            4: 0  // National\r\n        };\r\n        return lines.map((line, idx) => {\r\n            cupPositions[line.car.cupCategory] += 1;\r\n\r\n            line['position'] = idx+1;\r\n            line['cupPosition'] = cupPositions[line.car.cupCategory];\r\n            line['carName'] = CarMapping[line.car.carModel];\r\n            line.timing['timeDiff'] = idx===0 ? 0 : lines[idx].timing.bestLap - lines[0].timing.bestLap;\r\n            line.timing['timeDiffFormatted'] = idx===0 ? '' : '+' + this.msToTime(line.timing.timeDiff);\r\n            line.timing['bestLapFormatted'] = this.msToTime(line.timing.bestLap);\r\n\r\n            return line;\r\n        })\r\n    }\r\n\r\n    onUpload = () => {\r\n        this.fReader.onloadend = this.onFileRead;\r\n        this.fReader.readAsText(this.fileInput.current.files[0], 'UTF-16LE');\r\n    }\r\n\r\n    handleChange = (event) => {    \r\n        this.setState({title: event.target.value});  \r\n    }\r\n\r\n    render() {\r\n        let component = \r\n        <div className='div-1'>\r\n            <div><input type=\"file\" ref={this.fileInput}/></div>\r\n            <div><button type=\"button\" onClick={this.onUpload}>load</button></div>\r\n        </div>\r\n\r\n        if (this.state.dataLoaded) {\r\n            // scoreboardScreen -> [scoreboardPage] -> scoreboard -> [scoreBoardEntry]\r\n            //component = <Scoreboard content={this.content} title={this.state.title}/>;\r\n            component = <ResultsPage lines={this.content.leaderboard}></ResultsPage>\r\n        }\r\n        return (\r\n            <div>\r\n                {component}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","import React from 'react';\nimport './App.css';\nimport Menu from './Menu';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Menu />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
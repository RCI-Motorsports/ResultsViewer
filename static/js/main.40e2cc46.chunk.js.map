{"version":3,"sources":["ResultsTab.js","ResultsPage.js","Menu.js","App.js","serviceWorker.js","index.js"],"names":["ResultsTab","props","Table","className","variant","hover","this","lines","map","line","name","currentDriver","firstName","lastName","CupMapping","car","cupCategory","position","cupPosition","Component","ResultsPage","category","results","leaderboard","categoryNumber","Object","keys","find","key","filter","parseInt","allCategories","cupCategories","sort","unshift","Tabs","Tab","eventKey","title","getResultsForCategory","Menu","onFileRead","e","content","fReader","result","resContent","JSON","parse","resultObj","SessionMapping","sessionType","TrackMapping","trackName","leaderBoardLinesWithPos","addPositionField","sessionResult","leaderBoardLines","addCategories","setState","dataLoaded","msToTime","ms","Date","toISOString","slice","cupPositions","0","1","2","3","4","idx","CarMapping","carModel","timing","bestLap","timeDiff","console","log","forEach","includes","push","onUpload","onloadend","readAsText","fileInput","current","files","handleChange","event","target","value","state","React","createRef","FileReader","component","type","ref","onClick","App","rel","href","integrity","crossorigin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.40e2cc46.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport CupMapping from './cup_category_mapping.json';\r\n\r\nclass ResultsTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Table className='result-table' variant='dark' hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Overall pos</th>\r\n                        <th>Category pos</th>\r\n                        <th>Name</th>\r\n                        <th>Category</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.props.lines.map(line => {\r\n                        const name = line.currentDriver.firstName + \" \" + line.currentDriver.lastName;\r\n                        return (\r\n                            <tr className={CupMapping[line.car.cupCategory]}>\r\n                                <td>{line.position}</td>\r\n                                <td>{line.cupPosition}</td>\r\n                                <td>{name}</td>\r\n                                <td>{CupMapping[line.car.cupCategory]}</td>\r\n                            </tr>)\r\n                    })}\r\n                </tbody>\r\n                \r\n            </Table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResultsTab;","import React, { Component } from 'react';\r\nimport ResultsTab from './ResultsTab';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport CupMapping from './cup_category_mapping.json';\r\n\r\nclass ResultsPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    };\r\n\r\n    getResultsForCategory(category) {\r\n        if (category === 'Overall') {\r\n            return this.props.results.leaderboard;\r\n        }\r\n\r\n        const categoryNumber = Object.keys(CupMapping).find(key => CupMapping[key] === category);\r\n\r\n        return this.props.results.leaderboard.filter(line => {\r\n            return line.car.cupCategory === parseInt(categoryNumber, 10);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // {this.props.lines.map(line => {\r\n        //     return (<li key={line.position}>{line.position + \" - \" + line.currentDriver.firstName + \" \" + line.currentDriver.lastName}</li>)\r\n        // })}\r\n        \r\n        let allCategories = this.props.results.cupCategories;\r\n        allCategories.sort();\r\n        allCategories = allCategories.map(category => {\r\n            return CupMapping[category]\r\n        })\r\n        allCategories.unshift('Overall');\r\n        return (\r\n            <div>\r\n                <Tabs className=\"category-tabs\">\r\n                    {allCategories.map(category => {\r\n                        return (<Tab eventKey={category} title={category} key={category}>\r\n                            <div className=\"result-tab\">\r\n                                <ResultsTab lines={this.getResultsForCategory(category)} />\r\n                            </div>\r\n                            \r\n                        </Tab>)\r\n                    })}\r\n                </Tabs>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResultsPage;","import React, { Component } from 'react';\r\nimport TrackMapping from './track_name_mapping.json';\r\nimport SessionMapping from './session_mapping.json';\r\nimport CarMapping from './car_name_mapping.json';\r\nimport ResultsPage from './ResultsPage';\r\n\r\nclass Menu extends Component {\r\n    fReader;\r\n    content;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {dataLoaded: false, title: ''}\r\n        this.fileInput = React.createRef();\r\n        this.fReader = new FileReader();\r\n    };\r\n\r\n    onFileRead = (e) => {\r\n        const content = this.fReader.result;\r\n        \r\n        const resContent = JSON.parse(content);\r\n\r\n        let resultObj = {\r\n            'session': SessionMapping[resContent.sessionType],\r\n            'track': TrackMapping[resContent.trackName]\r\n        };\r\n        \r\n        const leaderBoardLinesWithPos = this.addPositionField(resContent.sessionResult.leaderBoardLines);\r\n        resultObj['leaderboard'] = leaderBoardLinesWithPos;\r\n\r\n        resultObj = this.addCategories(resultObj);\r\n\r\n        this.content = resultObj;\r\n\r\n        this.setState({dataLoaded: true});\r\n    }\r\n\r\n    msToTime = (ms) => {\r\n        return new Date(ms).toISOString().slice(14, -1);\r\n    }\r\n\r\n    addPositionField = (lines) => {\r\n        let cupPositions = {\r\n            0: 0, // Overall\r\n            1: 0, // ProAm\r\n            2: 0, // Am\r\n            3: 0, // Silver\r\n            4: 0  // National\r\n        };\r\n        return lines.map((line, idx) => {\r\n            cupPositions[line.car.cupCategory] += 1;\r\n\r\n            line['position'] = idx+1;\r\n            line['cupPosition'] = cupPositions[line.car.cupCategory];\r\n            line['carName'] = CarMapping[line.car.carModel];\r\n            line.timing['timeDiff'] = idx===0 ? 0 : lines[idx].timing.bestLap - lines[0].timing.bestLap;\r\n            line.timing['timeDiffFormatted'] = idx===0 ? '' : '+' + this.msToTime(line.timing.timeDiff);\r\n            line.timing['bestLapFormatted'] = this.msToTime(line.timing.bestLap);\r\n\r\n            return line;\r\n        });\r\n    }\r\n\r\n    addCategories = (resultObj) => {\r\n        let cupCategories = [];\r\n\r\n        console.log('---------');\r\n        console.log(resultObj);\r\n        console.log('---------');\r\n        resultObj.leaderboard.forEach(line => {\r\n            \r\n            if (!cupCategories.includes(line.car.cupCategory)) {\r\n                cupCategories.push(line.car.cupCategory);\r\n            }\r\n        });\r\n\r\n        resultObj[\"cupCategories\"] = cupCategories;\r\n\r\n        return resultObj;\r\n    }\r\n\r\n    onUpload = () => {\r\n        this.fReader.onloadend = this.onFileRead;\r\n        this.fReader.readAsText(this.fileInput.current.files[0], 'UTF-16LE');\r\n    }\r\n\r\n    handleChange = (event) => {    \r\n        this.setState({title: event.target.value});  \r\n    }\r\n\r\n    render() {\r\n        let component = \r\n        <div className='div-1'>\r\n            <div><input type=\"file\" ref={this.fileInput}/></div>\r\n            <div><button type=\"button\" onClick={this.onUpload}>load</button></div>\r\n        </div>\r\n\r\n        if (this.state.dataLoaded) {\r\n            // scoreboardScreen -> [scoreboardPage] -> scoreboard -> [scoreBoardEntry]\r\n            //component = <Scoreboard content={this.content} title={this.state.title}/>;\r\n            component = <ResultsPage results={this.content}></ResultsPage>\r\n        }\r\n        return (\r\n            <div>\r\n                {component}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","import React from 'react';\nimport './App.css';\nimport Menu from './Menu';\n//\nfunction App() {\n  return (\n    <div className=\"App\">\n      <link\n  rel=\"stylesheet\"\n  href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n  integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n  crossorigin=\"anonymous\"\n/>\n      <header className=\"App-header\">\n        <Menu />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}